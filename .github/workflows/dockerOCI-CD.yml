name: "OCI Docker Deployment"

# Define when to trigger the workflow (on each push to the main branch)
## Whatever push changes occurs to main branch, this workflow will trigger.
on:
#  workflow_call:
  workflow_dispatch:

jobs:
  release_Docker:
    # Set the environment for this job (place where these workflow will run below steps and cmds)
    runs-on: ubuntu-latest
    env:
      GIT_ORG: Ramiiyan
      REPOSITORY: IoT-Platform
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      OCI_DOCKER_HOST: ${{ vars.OCI_DOCKER_HOST }}
      DOCKER_CONTEXT_NAME: oracle-vm-docker
      IMAGE_NAME: rovo

    steps:
      # Checkout to current
      - name: Checkout
        uses: actions/checkout@v4

      # Download Docker
      - name: 'Set up Docker'
        run: |
          sudo apt-get update
          sudo apt-get install curl
          
          curl -fsSL https://get.docker.com/ | sh
          sudo usermod -aG docker runner

      # Login Docker
      - name: 'Login to Docker'
        run: |
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}

      - name: Create ssh directory
        run: mkdir --parents $HOME/.ssh

      - name: Start SSH Agent
        run: |
          if [ -z "$SSH_AGENT_PID" ]; then
            eval $(ssh-agent)
            echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
            echo "SSH_AGENT_PID=SSH_AGENT_PID" >> $GITHUB_ENV          
          fi    

      - name: Configure SSH client private key
        run: |
          echo "${{ secrets.OCI_SSH_KEY }}" | ssh-add -

       # Create Docker context
      - name: 'create OCI Docker context'
        run: |
          docker context create ${{ env.DOCKER_CONTEXT_NAME }} --docker "host=${{ env.OCI_DOCKER_HOST }}"
          docker context ls
          docker context use ${{ env.DOCKER_CONTEXT_NAME }}
          docker ps
          docker images

#      - name: Configure SSH client private key
#        run: |
#          if [ -n "${{ inputs.ssh_key }}" ]; then
#            echo "${{ inputs.ssh_key }}" | ssh-add - ;
#          fi


#    - shell: bash
#      name: Create the docker remote context
#      run: docker context create "${{ inputs.context_name }}" --docker "host=${{ inputs.docker_host }}"
#
#    - shell: bash
#      name: Set as current context
#      run: if [ "true" == "${{ inputs.use_context}}" ]; then docker context use "${{ inputs.context_name }}"; fi
#
#        # Create Docker context
#        - name: 'create OCI Docker context'
#          run: |
#            docker context create oracle-vm-docker --docker "host=ssh://ubuntu@168.138.71.132,key=${{ secrets.OCI_SSH_KEY }}"
#            docker context ls
#            docker ps
#            docker images