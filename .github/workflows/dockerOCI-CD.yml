name: "OCI Docker Deployment"

# Define when to trigger the workflow (on each push to the main branch)
## Whatever push changes occurs to main branch, this workflow will trigger.
on:
#  workflow_call:
  workflow_dispatch:

jobs:
  release_Docker:
    # Set the environment for this job (place where these workflow will run below steps and cmds)
    runs-on: ubuntu-latest
    env:
      GIT_ORG: Ramiiyan
      REPOSITORY: IoT-Platform
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      OCI_DOCKER_HOST: ${{ vars.OCI_DOCKER_HOST }}
      DOCKER_CONTEXT_NAME: oracle-vm-docker
      IMAGE_NAME: rovo

    steps:
      # Checkout to current
      - name: Checkout
        uses: actions/checkout@v4

      # Download Docker
      - name: 'Set up Docker'
        run: |
          sudo apt-get update
          sudo apt-get install curl
          
          curl -fsSL https://get.docker.com/ | sh
          sudo usermod -aG docker runner

      # Login Docker
      - name: 'Login to Docker'
        run: |
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}

      - uses: arwynfr/actions-docker-context@v2
        with:
          docker_host: 'ssh://ubuntu@168.138.71.132'
          context_name: ${{ env.DOCKER_CONTEXT_NAME }}
          ssh_key: ${{ secrets.OCI_SSH_KEY }}

      # Create Docker context
      - name: 'Create OCI Docker context'
        run: |
          echo "CHECKING IF KEY WAS ADDED" && ssh-add -l # Checking key was added correctly
          echo "StrictHostKeyChecking no" >> $( sudo find /etc -iname ssh_config) # Avoiding host check by changing the global configuration of ssh client
          docker context use ${{ env.DOCKER_CONTEXT_NAME }}
          docker context ls
          docker ps
          sleep 10s
          docker images
          sleep 10s


#      - name: Create ssh directory
#        run: mkdir --parents $HOME/.ssh
#
#      - name: Start SSH Agent
#        run: |
#          if [ -z "$SSH_AGENT_PID" ]; then
#            eval $(ssh-agent)
#            echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
#            echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV
#          fi
#      - name: Configure SSH client private key
#        run: if [ -n "${{ secrets.OCI_SSH_KEY }}" ]; then echo "${{ secrets.OCI_SSH_KEY }}" | ssh-add - ; fi
#      - name: Configure SSH client private key
#        run: |
#          echo "${{ secrets.OCI_SSH_KEY }}" | ssh-add
#
#       # Create Docker context
#      - name: 'Create OCI Docker context'
#        run: |
#          docker context create ${{ env.DOCKER_CONTEXT_NAME }} --docker "host=${{ env.OCI_DOCKER_HOST }}"
#          docker context use ${{ env.DOCKER_CONTEXT_NAME }}
#          docker context ls
#          docker ps
#          docker images

      # Pull Latest Image from the Docker repository
#      - name: 'Pull Docker image'
#        run: |
#          docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
#          docker images